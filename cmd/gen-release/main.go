package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/parser"
	"go/token"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

const releaseFileSuffix = "_release.go"
const debugFileSuffix = "_debug.go"

const releaseTemplate = `// Code generated by gen-release. DO NOT EDIT.
//go:build !debug && !bumert

package {{.PackageName}}

{{if .IsBumertPackage}}
// Assertion is a no-op struct in release builds.
type Assertion struct{}

// Should is a no-op function in release builds.
// It returns a pointer to a singleton no-op Assertion,
// allowing method chains to execute silently without effect.
func Should(value any) *Assertion {
	return &noOpAssertion
}

// A singleton instance for the no-op assertion.
var noOpAssertion Assertion
{{end}}

{{range .Funcs}}
// {{.Name}} is a no-op {{if .ReceiverType}}method{{else}}function{{end}} in release builds.
func {{if .ReceiverName}}({{.ReceiverName}} {{.ReceiverType}}){{end}} {{.Name}}({{range $i, $p := .Params}}{{if $i}}, {{end}}{{$p.Name}} {{$p.Type}}{{end}}) {{if .Returns}}({{.Returns}}){{end}} {
{{if .IsAssertionMethod}}	return {{.ReceiverName}} // Return receiver for chainability
{{else}}	// No-op
{{end}}}
{{end}}
`

type TemplateData struct {
	PackageName     string
	IsBumertPackage bool
	Funcs           []FuncInfo
}

type FuncInfo struct {
	Name              string
	ReceiverName      string // e.g., "a"
	ReceiverType      string // e.g., "*Assertion"
	Params            []ParamInfo
	Returns           string // Simple string representation for now
	IsAssertionMethod bool   // Specific flag for Assertion methods
}

type ParamInfo struct {
	Name string
	Type string
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("gen-release: ")

	inFile := flag.String("in", "", "input debug file path (e.g., bumert_debug.go)")
	flag.Parse()

	if *inFile == "" {
		log.Fatal("-in flag is required")
	}

	if !strings.HasSuffix(*inFile, debugFileSuffix) {
		log.Fatalf("input file %q does not end with %s", *inFile, debugFileSuffix)
	}

	outFile := strings.Replace(*inFile, debugFileSuffix, releaseFileSuffix, 1)
	dir := filepath.Dir(*inFile)
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, *inFile, nil, parser.ParseComments)
	if err != nil {
		log.Fatalf("failed to parse input file %q: %v", *inFile, err)
	}

	data := TemplateData{
		PackageName:     node.Name.Name,
		IsBumertPackage: node.Name.Name == "bumert",
		Funcs:           []FuncInfo{},
	}

	ast.Inspect(node, func(n ast.Node) bool {
		switch x := n.(type) {
		case *ast.FuncDecl:
			if !x.Name.IsExported() {
				return true // Skip unexported
			}

			fi := FuncInfo{
				Name:   x.Name.Name,
				Params: extractParams(fset, x.Type.Params),
			}

			// Handle methods
			if x.Recv != nil && len(x.Recv.List) > 0 {
				recvField := x.Recv.List[0]
				if len(recvField.Names) > 0 {
					fi.ReceiverName = recvField.Names[0].Name
				}
				fi.ReceiverType = exprToString(fset, recvField.Type)

				// Special handling for Assertion methods in bumert package
				if data.IsBumertPackage {
					if ptr, ok := recvField.Type.(*ast.StarExpr); ok {
						if ident, ok := ptr.X.(*ast.Ident); ok && ident.Name == "Assertion" {
							fi.IsAssertionMethod = true
							fi.Returns = "*Assertion" // Assume chainable return
						}
					}
				}
			} else if x.Name.Name == "Should" && data.IsBumertPackage {
				// Skip generating the top-level 'Should' func, handled by template
				return true
			}

			// Simple return type extraction
			if !fi.IsAssertionMethod && x.Type.Results != nil && len(x.Type.Results.List) > 0 {
				// Basic extraction, might need enhancement for multi-return
				fi.Returns = exprToString(fset, x.Type.Results.List[0].Type)
			}

			// Add function/method to list unless it's the special bumert.Should
			if !(x.Name.Name == "Should" && data.IsBumertPackage && x.Recv == nil) {
				data.Funcs = append(data.Funcs, fi)
			}
		}
		return true
	})

	tmpl, err := template.New("release").Parse(releaseTemplate)
	if err != nil {
		log.Fatalf("failed to parse template: %v", err)
	}

	var generatedCode bytes.Buffer
	if err := tmpl.Execute(&generatedCode, data); err != nil {
		log.Fatalf("failed to execute template: %v", err)
	}

	formattedCode, err := format.Source(generatedCode.Bytes())
	if err != nil {
		log.Fatalf("failed to format generated code: %v\nCode:\n%s", err, generatedCode.String())
	}

	err = os.WriteFile(filepath.Join(dir, outFile), formattedCode, 0644)
	if err != nil {
		log.Fatalf("failed to write output file %q: %v", outFile, err)
	}

	log.Printf("Generated %s\n", filepath.Join(dir, outFile))
}

func extractParams(fset *token.FileSet, params *ast.FieldList) []ParamInfo {
	var results []ParamInfo
	if params == nil {
		return results
	}
	for _, field := range params.List {
		fieldType := exprToString(fset, field.Type)
		// Handle named parameters
		for _, name := range field.Names {
			results = append(results, ParamInfo{Name: name.Name, Type: fieldType})
		}
		// Handle anonymous parameters (like 'value any')
		if len(field.Names) == 0 {
			// Use a placeholder name like _ or generate one if needed by template
			// For now, let's use the type itself in lowercase as a placeholder name
			placeholderName := strings.ToLower(strings.Split(fieldType, ".")[0]) // Basic placeholder
			// Handle pointer types for placeholder name
			if strings.HasPrefix(placeholderName, "*") {
				placeholderName = strings.ToLower(placeholderName[1:])
			}
			if placeholderName == "" || placeholderName == "_" { // fallback
				placeholderName = fmt.Sprintf("arg%d", len(results))
			}

			results = append(results, ParamInfo{Name: placeholderName, Type: fieldType})
		}
	}
	return results
}

func exprToString(fset *token.FileSet, expr ast.Expr) string {
	buf := new(bytes.Buffer)
	format.Node(buf, fset, expr)
	return buf.String()
}
